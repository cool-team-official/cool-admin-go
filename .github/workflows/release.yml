name: Build Release
on:
  push:
    tags:
      - v* 
env:
  TZ: Asia/Shanghai

jobs:
  build:
    name: Build And Release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v3
        with:
          go-version-file: './go.mod'
      - name: install dependencies and set env.BIN_NAME
        run: |
          go version
          make cli 
          gf version
          echo ${{github.ref}}
          pwd
          repository_array=(${GITHUB_REPOSITORY//\// })
          binname=${repository_array[1]}
          binname=cool-tools
          echo ${binname}
          echo "BIN_NAME=${binname}" >> $GITHUB_ENV

      - name: Build CLI Binary For All Platform
        run: |
          pwd
          go work init
          find ./ -name "go.mod" | while read line
          do
              MOD_DIR=$(dirname $line)
              echo "MOD_DIR: $MOD_DIR"
              go work use $MOD_DIR
          done

          cd cool-tools
          go mod tidy
          make pack
          gf build main.go -n ${{env.BIN_NAME}} -a 386,amd64,arm,arm64 -s linux,darwin,windows -p ./temp -r '{"version":"${{github.ref_name},"mode":"cool-tools"}'
      - name: Move Files Before Release
        run: |
          pwd
          cd cool-tools/temp
          for OS in *;do for FILE in $OS/*;\
          do if [[ ${OS} =~ 'windows' ]];\
          then mv $FILE ${{env.BIN_NAME}}_${OS}.exe && rm -rf $OS;\
          else mv $FILE ${{env.BIN_NAME}}_$OS && rm -rf $OS;\
          fi;done;done
          pwd
          ls

      - name: Create Github Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name:     ${{ github.ref }}
          release_name: ${{env.BIN_NAME}} Release ${{ github.ref }}
          draft:        false
          prerelease:   false
      
      - name: Upload Release Asset
        id:   upload-release-asset
        uses: alexellis/upload-assets@0.2.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          asset_paths: '["cool-tools/temp/${{env.BIN_NAME}}_*"]'

##############################################################################################
#                               以下为Docker镜像的构建                                        #
# 需要提前配置好 secrets.DOCKERHUB_USERNAME 和 secrets.DOCKERHUB_TOKEN                        #
# Dockerfile文件默认在 ./Dockerfile                                                          #
##############################################################################################
      # -
      #   name: Set up QEMU
      #   uses: docker/setup-qemu-action@v2
      # -
      #   name: Set up Docker Buildx
      #   id: buildx
      #   uses: docker/setup-buildx-action@v2
      #   with:
      #     install: true
      # -
      #   name: Login to Docker Hub
      #   uses: docker/login-action@v2
      #   with:
      #     username: ${{ secrets.DOCKERHUB_USERNAME }}
      #     password: ${{ secrets.DOCKERHUB_TOKEN }}
      # -
      #   name: Inspect builder
      #   run: |
      #     echo "Name:      ${{ steps.buildx.outputs.name }}"
      #     echo "Endpoint:  ${{ steps.buildx.outputs.endpoint }}"
      #     echo "Status:    ${{ steps.buildx.outputs.status }}"
      #     echo "Flags:     ${{ steps.buildx.outputs.flags }}"
      #     echo "Platforms: ${{ steps.buildx.outputs.platforms }}"
      # -
      #   name: Docker meta
      #   id: meta
      #   uses: docker/metadata-action@v4
      #   with:
      #     images: ${{github.repository}}
      # -
      #   name: Build and push
      #   uses: docker/build-push-action@v3
      #   with:
      #     context: .
      #     platforms: linux/amd64,linux/arm/v7,linux/arm64,linux/386,linux/ppc64le
      #     push: true
      #     tags:  ${{ steps.meta.outputs.tags }}
      #     labels: ${{ steps.meta.outputs.labels }}
